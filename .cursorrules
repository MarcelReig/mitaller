# MiTaller.art - Marketplace de Artesanos de Menorca

## Contexto del Proyecto
Marketplace multi-vendor SaaS para artesanos de Menorca. Los artesanos pueden:
- Crear perfil p√∫blico con slug √∫nico (/artistas/{slug})
- Gestionar portfolio de obras (galer√≠a de su trabajo)
- Vender productos con Stripe Connect (comisi√≥n 12%)
- Gestionar pedidos desde su dashboard

## Stack Tecnol√≥gico

### Backend (Django)
- Framework: Django 5.2.7 + Django REST Framework 3.16.1
- Database: PostgreSQL 15
- Auth: JWT (djangorestframework-simplejwt)
- Media: Cloudinary (implementado)
- Payments: Stripe Connect Express (implementado)
- Monitoring: Sentry (monitoreo de errores en producci√≥n)
- Deploy: Railway

### Frontend (Next.js)
- Framework: Next.js 15.5.4 (App Router) + React 19
- Language: TypeScript (strict mode)
- Styling: Tailwind CSS 4 + shadcn/ui
- HTTP: Axios + TanStack Query
- State: Zustand (auth + cart)
- Deploy: Vercel

## Estructura del Monorepo

mitaller/
‚îú‚îÄ‚îÄ backend/          # Django REST API
‚îÇ   ‚îú‚îÄ‚îÄ config/       # Settings del proyecto
‚îÇ   ‚îú‚îÄ‚îÄ accounts/     # Custom User + Auth
‚îÇ   ‚îú‚îÄ‚îÄ artisans/     # Perfiles de artesanos (antes artists)
‚îÇ   ‚îú‚îÄ‚îÄ works/        # Portfolio items
‚îÇ   ‚îú‚îÄ‚îÄ shop/         # Productos
‚îÇ   ‚îú‚îÄ‚îÄ orders/       # Pedidos
‚îÇ   ‚îú‚îÄ‚îÄ payments/     # Stripe Connect
‚îÇ   ‚îî‚îÄ‚îÄ admin_panel/  # Panel admin
‚îî‚îÄ‚îÄ frontend/         # Next.js App Router
    ‚îî‚îÄ‚îÄ src/
        ‚îú‚îÄ‚îÄ app/      # Routes (App Router)
        ‚îÇ   ‚îú‚îÄ‚îÄ (admin)/     # Panel administraci√≥n
        ‚îÇ   ‚îú‚îÄ‚îÄ (public)/    # P√°ginas p√∫blicas
        ‚îÇ   ‚îú‚îÄ‚îÄ (dashboard)/ # Dashboard artesano
        ‚îÇ   ‚îî‚îÄ‚îÄ (auth)/      # Login/Registro
        ‚îú‚îÄ‚îÄ components/
        ‚îÇ   ‚îú‚îÄ‚îÄ admin/       # Admin dashboard
        ‚îÇ   ‚îú‚îÄ‚îÄ cart/        # Carrito multi-vendor
        ‚îÇ   ‚îú‚îÄ‚îÄ artisans/    # Artesanos
        ‚îÇ   ‚îú‚îÄ‚îÄ products/    # Tienda
        ‚îÇ   ‚îî‚îÄ‚îÄ ...
        ‚îú‚îÄ‚îÄ lib/      # Utils + API client
        ‚îú‚îÄ‚îÄ stores/   # Zustand stores
        ‚îî‚îÄ‚îÄ types/    # TypeScript types

## Apps Django y Responsabilidades

### accounts (Auth + Users)
- Custom User model (email como username)
- Roles: ADMIN, ARTISAN, CUSTOMER
- JWT authentication (register, login, refresh, logout)
- is_approved: Aprobaci√≥n manual por admin antes de vender
- Email verification (futuro)

### artisans (Perfiles P√∫blicos) - ANTES: artists
- ArtisanProfile model (1:1 con User)
- Campos: slug, display_name, bio, avatar, cover_image, location (pueblo Menorca), craft_type
- Stripe: stripe_account_id, stripe_account_status, onboarding_completed
- URLs p√∫blicas: /api/v1/artisans/, /api/v1/artisans/{slug}/
- IMPORTANTE: Nomenclatura artisan (NO artist) en todo el c√≥digo nuevo

### works (Portfolio)
- Work model: t√≠tulo, descripci√≥n, categor√≠a, media_urls[], thumbnail_url
- ForeignKey a ArtistProfile
- display_order para drag & drop
- Solo el artesano due√±o puede editar sus obras

### shop (E-commerce)
- Product model: nombre, precio, stock, thumbnail_url (Cloudinary), images (JSON)
- Integraci√≥n Stripe Connect: stripe_product_id, stripe_price_id
- Solo el artesano due√±o puede editar sus productos

### orders (Pedidos)
- Order model: multi-vendor, status, payment_status, customer_email (guest checkout)
- OrderItem: relaciona Order con Product y Artisan (snapshot de precio para inmutabilidad)
- order_number auto-generado: ORD-YYYYMMDD-XXXXXX

### payments (Stripe Connect)
- Payment model: historial de pagos, stripe_payment_id
- Stripe Connect onboarding para artesanos
- Webhooks para sincronizaci√≥n de estado

## Convenciones de C√≥digo

### Python (Backend)
- Style: PEP 8 estricto
- Type hints: Usar siempre que sea posible
- Docstrings: Google style para funciones complejas
- Imports: isort con perfil "black"
- Naming:
  * Variables/funciones: snake_case
  * Clases: PascalCase
  * Constantes: UPPER_SNAKE_CASE

### TypeScript (Frontend)
- Style: Airbnb + Prettier
- Strict mode: habilitado
- Naming:
  * Variables/funciones: camelCase
  * Componentes: PascalCase
  * Constantes: UPPER_SNAKE_CASE
  * Tipos/Interfaces: PascalCase SIN prefijo I (User, Artisan, not IUser)
- Path aliases: `@/components/*`, `@/lib/*`, `@/types/*`, `@/stores/*`

### CSS (Tailwind)
- Preferir utilities de Tailwind
- Custom CSS solo cuando sea necesario (usar BEM)
- Responsive: mobile-first (sm:, md:, lg:, xl:)

## Patrones de Dise√±o

### Backend (Django)
- Views: Class-Based Views con ViewSets (DRF)
- Serializers: ModelSerializer con validaciones custom
- Permissions: Custom permissions (IsArtistOwner, IsVerifiedArtisan)
- URLs: Routers de DRF, versionado /api/v1/
- Queries: Usar select_related/prefetch_related para optimizar
- Transactions: Usar transaction.atomic() en operaciones cr√≠ticas

### Frontend (Next.js)
- Components: Server Components por defecto
- Client Components: Solo cuando necesites interactividad (use* hooks)
- Data fetching: Server Components cuando sea posible, TanStack Query para client
- State management:
  * Local: useState, useReducer
  * Global: Zustand (auth, cart)
  * Server: Next.js cache, TanStack Query
- Forms: React Hook Form + zod validation
- Error handling: Error boundaries + try/catch apropiados
- **Route Groups:** Organizaci√≥n con `(admin)`, `(dashboard)`, `(public)`, `(auth)` para layouts espec√≠ficos
  * `(admin)/` - Panel de administraci√≥n con AdminSidebar
  * `(dashboard)/` - Dashboard del artesano con DashboardSidebar
  * `(public)/` - P√°ginas p√∫blicas (artesanos, explorar, etc.)
  * `(auth)/` - Login y registro
  * Ventaja: Layouts y middleware espec√≠ficos sin afectar URLs

### Patrones Multi-Vendor

**Filosof√≠a:** "Juntos pero no revueltos" - cada artesano mantiene su independencia

**Backend:**
- Cada artesano tiene `shipping_cost` independiente (default 5.00‚Ç¨)
- Productos pueden tener `pickup_available` y `pickup_instructions`
- Productos `is_featured` se muestran primero en la tienda del artesano
- Endpoint `/api/v1/artisans/{slug}/products/` para productos por artesano

**Frontend:**
- **Hooks personalizados:**
  * `useArtisanProducts(slug, filters)` - Fetch productos de un artesano
  * `useCartByArtisan()` - Agrupa items del carrito por artesano autom√°ticamente
  * `useMediaQuery(query)` - Detecta breakpoints para responsive UI
- **Componentes de carrito:**
  * `CartDrawer` - Drawer lateral con agrupaci√≥n por artesano
  * `CartItemRow` - Fila de producto con +/- (debounce 500ms)
  * Actualizaci√≥n optimista con delay de 300ms
- **Agrupaci√≥n autom√°tica:**
  * CartStore almacena items planos
  * useCartByArtisan() transforma a `CartItemsByArtisan`
  * Cada artesano muestra: subtotal productos + shipping_cost + total
  * Grand total suma todos los artesanos

**Convenciones:**
- Debounce de 500ms en actualizaci√≥n de cantidad del carrito
- Optimistic UI con delay de 300ms para mejor UX
- Shipping cost calculado por artesano, no global
- Cada pedido agrupa items por artesano para futuras split orders

## Calidad de C√≥digo y Mejores Pr√°cticas

### üéØ Principios Fundamentales

**NUNCA:**
- ‚ùå Implementar parches temporales o "quick fixes" que oculten el problema real
- ‚ùå A√±adir excepciones especiales en c√≥digo global (code smell)
- ‚ùå Crear soluciones "fire-and-forget" sin manejo de errores
- ‚ùå Dejar c√≥digo espagueti o dif√≠cil de mantener
- ‚ùå Asumir que "funciona" es suficiente sin considerar arquitectura
- ‚ùå Ignorar code smells con la excusa de "hacerlo despu√©s"

**SIEMPRE:**
- ‚úÖ Identificar y resolver la causa ra√≠z del problema
- ‚úÖ Escribir c√≥digo limpio, mantenible y escalable desde el inicio
- ‚úÖ Seguir el orden l√≥gico de operaciones (servidor ‚Üí cliente ‚Üí UI)
- ‚úÖ Implementar manejo robusto de errores (try-catch-finally)
- ‚úÖ Documentar decisiones t√©cnicas importantes
- ‚úÖ Refactorizar cuando detectes un mal olor en el c√≥digo

### üèóÔ∏è Arquitectura Profesional

#### 1. Flujo Correcto de Operaciones

**Ejemplo: Logout**
```typescript
// ‚úÖ CORRECTO: Backend primero, limpieza local despu√©s
logout: async () => {
  try {
    // 1. Invalidar en servidor (con token v√°lido)
    await backend.logout();
  } catch (error) {
    // 2. Manejo graceful si falla
    console.warn('Backend failed, continuing cleanup');
  } finally {
    // 3. Limpieza local (siempre se ejecuta)
    clearLocalState();
    // 4. UI feedback
    showToast();
    redirect();
  }
}

// ‚ùå INCORRECTO: Limpieza local primero
logout: () => {
  clearLocalState();  // Token eliminado
  backend.logout();   // Falla: no hay token
  redirect();         // Interceptor redirige a /login antes
}
```

**Principio:** Operaciones cr√≠ticas de servidor primero, estado local despu√©s.

#### 2. Manejo de Errores Robusto

**Backend (Python):**
```python
# ‚úÖ CORRECTO: Try-except con contexto espec√≠fico
try:
    profile = ArtistProfile.objects.get(slug=slug)
    profile.update_stripe_account(account_id)
    profile.save()
except ArtistProfile.DoesNotExist:
    logger.error(f"Artist profile not found: {slug}")
    raise Http404("Perfil no encontrado")
except StripeError as e:
    logger.error(f"Stripe API error: {str(e)}")
    raise ValidationError("Error al conectar con Stripe")
except Exception as e:
    logger.critical(f"Unexpected error: {str(e)}")
    raise

# ‚ùå INCORRECTO: Catch gen√©rico sin contexto
try:
    # ... c√≥digo
except:
    pass  # Silent failure
```

**Frontend (TypeScript):**
```typescript
// ‚úÖ CORRECTO: Manejo espec√≠fico con fallback
async function fetchArtist(slug: string): Promise<Artist> {
  try {
    const response = await api.get(`/artists/${slug}/`);
    return response.data;
  } catch (error) {
    if (error.response?.status === 404) {
      throw new NotFoundError('Artista no encontrado');
    }
    if (error.response?.status >= 500) {
      throw new ServerError('Error del servidor');
    }
    throw new NetworkError('Error de conexi√≥n');
  }
}

// ‚ùå INCORRECTO: Catch sin tipar
try {
  const data = await api.get(url);
} catch (e) {
  console.log(e);  // ¬øQu√© hacemos con el error?
}
```

#### 3. C√≥digo Auto-Documentado

**Usa nombres descriptivos:**
```typescript
// ‚úÖ CORRECTO: Intenci√≥n clara
async function invalidateUserSessionOnServer(userId: number): Promise<void> {
  await axiosInstance.post('/api/v1/auth/logout/');
}

// ‚ùå INCORRECTO: Nombre ambiguo
async function doLogout(): Promise<void> {
  // ¬øQu√© hace exactamente?
}
```

**Comentarios explican el "por qu√©", no el "qu√©":**
```python
# ‚úÖ CORRECTO: Explica la decisi√≥n
# Guardamos el thumbnail por separado para optimizar la carga inicial de la galer√≠a
# Las im√°genes completas se cargan bajo demanda (lazy loading)
thumbnail_url = cloudinary.upload(image, transformation={
    'width': 400,
    'height': 300,
    'crop': 'fill'
})

# ‚ùå INCORRECTO: Repite el c√≥digo
# Subir thumbnail
thumbnail_url = cloudinary.upload(image, ...)
```

#### 4. Principio DRY pero con Sentido Com√∫n

```typescript
// ‚úÖ CORRECTO: Abstracci√≥n √∫til
function createAuthenticatedRequest(endpoint: string, data: unknown) {
  return axiosInstance.post(endpoint, data, {
    headers: { Authorization: `Bearer ${getToken()}` }
  });
}

// ‚ùå INCORRECTO: Sobre-abstracci√≥n innecesaria
function get(url) { return fetch(url); }
function post(url, data) { return fetch(url, {method: 'POST', body: data}); }
// ... Mejor usar una librer√≠a como axios
```

#### 5. Single Responsibility Principle

```python
# ‚úÖ CORRECTO: Responsabilidades separadas
class OrderService:
    def create_order(self, cart_items: List[CartItem]) -> Order:
        order = self._build_order(cart_items)
        self._validate_stock(cart_items)
        self._process_payment(order)
        self._send_confirmation_email(order)
        return order

# ‚ùå INCORRECTO: Funci√≥n monol√≠tica
def create_order_and_do_everything(items):
    # 200 l√≠neas de c√≥digo mezclando validaci√≥n, 
    # pago, emails, notificaciones, etc.
```

### üö® Code Smells Comunes y C√≥mo Evitarlos

#### 1. Excepciones Especiales (Ejemplo Real)

```typescript
// ‚ùå INCORRECTO: Parche en interceptor
if (error.response?.status === 401) {
  // Excepci√≥n especial para logout
  if (url.includes('/auth/logout/')) {
    return Promise.reject(error);  // Code smell
  }
  // ... resto del c√≥digo
}

// ‚úÖ CORRECTO: Resolver la causa ra√≠z
// Cambiar el orden en authStore.logout() para que
// llame al backend ANTES de eliminar el token
```

#### 2. Estado Temporal Fr√°gil

```typescript
// ‚ùå INCORRECTO: Confiar en sessionStorage
logout: () => {
  sessionStorage.setItem('logout_success', 'true');
  clearTokens();
  redirect('/');
}
// En home:
useEffect(() => {
  if (sessionStorage.getItem('logout_success')) {
    toast.success('...');
    sessionStorage.removeItem('logout_success');
  }
}, []);

// ‚úÖ CORRECTO: Operaci√≥n at√≥mica
logout: async () => {
  await backend.logout();
  clearTokens();
  toast.success('...');
  setTimeout(() => redirect('/'), 800);
}
```

#### 3. Callbacks Hell

```typescript
// ‚ùå INCORRECTO: Pyramid of doom
function processOrder(orderId, callback) {
  getOrder(orderId, (order) => {
    validateStock(order, (valid) => {
      if (valid) {
        processPayment(order, (payment) => {
          sendConfirmation(order, payment, (sent) => {
            callback(null, order);
          });
        });
      }
    });
  });
}

// ‚úÖ CORRECTO: Async/await limpio
async function processOrder(orderId: number): Promise<Order> {
  const order = await getOrder(orderId);
  const isValid = await validateStock(order);
  
  if (!isValid) throw new ValidationError('Stock insuficiente');
  
  const payment = await processPayment(order);
  await sendConfirmation(order, payment);
  
  return order;
}
```

### üìè M√©tricas de C√≥digo de Calidad

**Antes de hacer commit, preg√∫ntate:**

1. **¬øEs mantenible?** ¬øLo entender√°s en 6 meses?
2. **¬øEs escalable?** ¬øFunciona con 1 usuario y con 10,000?
3. **¬øEs testeable?** ¬øPuedes escribir tests f√°cilmente?
4. **¬øEs resiliente?** ¬øManeja errores gracefully?
5. **¬øEs limpio?** ¬øHay code smells evidentes?

**Si la respuesta a alguna es "No", refactoriza antes de continuar.**

### üéì Ejemplo Completo: Logout Profesional

**Antes (Con problemas):**
```typescript
logout: () => {
  removeAllTokens();              // 1. Elimina tokens primero
  axiosInstance.post('/logout/'); // 2. Backend falla (401)
  window.location.href = '/';     // 3. Interceptor redirige a /login
}
```

**Problemas:**
- ‚ùå Orden incorrecto de operaciones
- ‚ùå Backend no puede invalidar token
- ‚ùå Interceptor causa redirect inesperado
- ‚ùå No hay manejo de errores
- ‚ùå Code smell: necesita excepci√≥n en interceptor

**Despu√©s (Profesional):**
```typescript
/**
 * Cierra sesi√≥n del usuario
 * 
 * Flujo:
 * 1. Invalida token en servidor (permite blacklist)
 * 2. Limpia estado local (garantizado con finally)
 * 3. Muestra feedback y redirige
 */
logout: async () => {
  try {
    // Backend primero (con token v√°lido)
    await axiosInstance.post('/api/v1/auth/logout/');
  } catch (error) {
    // Graceful degradation si backend falla
    console.warn('Backend logout failed, continuing with local cleanup:', error);
  } finally {
    // Limpieza local (siempre se ejecuta)
    removeAllTokens();
    set({ user: null, isAuthenticated: false });
    
    // UI feedback
    toast.success('Sesi√≥n cerrada exitosamente');
    setTimeout(() => window.location.href = '/', 800);
  }
}
```

**Ventajas:**
- ‚úÖ Orden l√≥gico: servidor ‚Üí cliente ‚Üí UI
- ‚úÖ Backend puede hacer blacklist
- ‚úÖ Manejo robusto de errores
- ‚úÖ Limpieza garantizada (finally)
- ‚úÖ Sin code smells ni parches
- ‚úÖ C√≥digo auto-documentado
- ‚úÖ Testeable y mantenible

## API Design

### Endpoints RESTful
GET    /api/artists/              # Listar artistas (p√∫blico)
GET    /api/artists/{slug}/       # Detalle artista (p√∫blico)
POST   /api/artists/              # Crear perfil (auth requerido)
PUT    /api/artists/{slug}/       # Actualizar (owner only)

GET    /api/works/                # Listar obras (p√∫blico, filtrable por artist)
POST   /api/works/                # Crear obra (artisan verified)
PUT    /api/works/{id}/           # Actualizar (owner only)
DELETE /api/works/{id}/           # Eliminar (owner only)

GET    /api/products/             # Listar productos (p√∫blico)
POST   /api/products/             # Crear producto (artisan verified)
POST   /api/orders/               # Crear orden (customer)
GET    /api/orders/me/            # Mis √≥rdenes (auth)

### Response format
Success:
{
  "success": true,
  "data": {...},
  "message": "Success message"
}

Error:
{
  "success": false,
  "error": "Error message",
  "details": {...}
}

## Seguridad

### Backend
- CORS: Solo frontend (local + producci√≥n)
- JWT: Access token (15min) + Refresh token (7 d√≠as)
- Permissions: Verificar en CADA endpoint (IsAuthenticated, IsArtistOwner)
- Input validation: Serializers + custom validators
- SQL Injection: ORM previene (no raw queries sin parametrizar)
- Secrets: Siempre en .env, nunca commitear

### Frontend
- JWT: Almacenar en httpOnly cookie (preferido) o localStorage (fallback)
- CSRF: Next.js maneja autom√°ticamente en Server Actions
- XSS: React escapa autom√°ticamente, cuidado con dangerouslySetInnerHTML
- Env vars: NEXT_PUBLIC_* solo para p√∫blicas, secretas en server-side

## Testing (Fase futura)

### Backend
- Framework: pytest + pytest-django
- Coverage m√≠nimo: 80%
- Tests cr√≠ticos: Auth, Payments, Permissions
- Fixtures: factory_boy para datos de prueba

### Frontend
- Framework: Vitest + React Testing Library
- E2E cr√≠ticos: Playwright (registro ‚Üí login ‚Üí crear producto ‚Üí compra)

## Git Workflow

### Commits
Conventional Commits:
- feat: Nueva feature
- fix: Bug fix
- refactor: Refactoring sin cambio funcional
- docs: Documentaci√≥n
- test: Tests
- chore: Tareas mantenimiento

Ejemplos:
feat(artists): add bio field to artist profile
fix(auth): resolve JWT refresh token expiry issue
refactor(shop): optimize product query with select_related

### Branches (cuando sea necesario)
- main: Producci√≥n estable
- develop: Desarrollo activo (por ahora trabaja directo en main)
- feature/nombre: Features nuevas (futuro)

## üö® REGLA CR√çTICA: Verificaci√≥n de Consistencia FE/BE

**ANTES de finalizar cualquier cambio en backend o frontend, verifica:**

### Si modificaste Backend (models.py, serializers.py, views.py):

1. **¬øCambi√≥ la estructura de datos?**
   - ‚úÖ Actualiza el tipo TypeScript correspondiente en `frontend/src/types/`
   - ‚úÖ Verifica que los campos opcionales/requeridos coincidan
   - ‚úÖ Verifica que los tipos de datos coincidan (int ‚Üí number, str ‚Üí string)

2. **¬øA√±adiste un nuevo endpoint?**
   - ‚úÖ A√±ade la funci√≥n correspondiente en `frontend/src/lib/api/*.ts`
   - ‚úÖ Actualiza la tabla de endpoints en `docs/ai-assistants/CONTEXT_FOR_CLAUDE.md`

3. **¬øCambi√≥ la l√≥gica de permisos?**
   - ‚úÖ Verifica protecci√≥n de rutas en `frontend/src/app/(dashboard)/**`
   - ‚úÖ Actualiza guards si es necesario

### Si modificaste Frontend (types/, api/, components/):

1. **¬øCambi√≥ un tipo TypeScript?**
   - ‚úÖ Verifica que el serializer de backend tenga los mismos campos
   - ‚úÖ Haz un request de prueba para confirmar la estructura

2. **¬øA√±adiste un nuevo campo en un form?**
   - ‚úÖ Verifica que el serializer backend acepte ese campo
   - ‚úÖ Verifica validaciones en ambos lados

### Errores Comunes a Prevenir:

‚ùå **NO hacer:**
- A√±adir campo en backend pero olvidar el tipo en frontend
- Crear endpoint nuevo sin API service
- Cambiar tipo de dato (int ‚Üí string) sin actualizar el otro lado
- Hacer campo opcional en un lado pero requerido en el otro

‚úÖ **S√ç hacer:**
- Cambiar backend Y frontend en el mismo commit
- Verificar tipos despu√©s de cada cambio de serializer
- Probar la integraci√≥n completa FE/BE antes de commitear

---

## Reglas de Generaci√≥n de C√≥digo

Cuando generes c√≥digo, SIEMPRE:

1. **Resuelve la causa ra√≠z, no los s√≠ntomas**
   - ‚ùå No a√±adas excepciones especiales o parches temporales
   - ‚úÖ Identifica por qu√© ocurre el problema y arr√©glalo en origen
   - Si algo requiere una "excepci√≥n especial", el dise√±o est√° mal

2. **Sigue el orden l√≥gico de operaciones**
   - Servidor primero (invalidar, guardar, actualizar)
   - Cliente despu√©s (estado local, cache)
   - UI al final (feedback, redirects)

3. **Maneja errores de forma robusta**
   - Backend: try/except espec√≠ficos con logging contextual
   - Frontend: try-catch-finally con graceful degradation
   - Nunca silenciar errores (catch sin manejo)
   - Logs √∫tiles: qu√© fall√≥, por qu√©, d√≥nde

4. **Escribe c√≥digo mantenible desde el inicio**
   - Preg√∫ntate: ¬øLo entender√© en 6 meses?
   - Refactoriza cuando detectes code smells
   - Nombres descriptivos > comentarios explicativos
   - Funciones peque√±as con responsabilidad √∫nica

5. **Explica decisiones t√©cnicas importantes**
   - ¬øPor qu√© elegiste este approach?
   - ¬øQu√© alternativas consideraste?
   - ¬øQu√© trade-offs tiene?

6. **Incluye comentarios para el "por qu√©", no el "qu√©"**
   ```python
   # ‚úÖ BIEN: Explica la decisi√≥n de negocio
   # Guardamos thumbnail separado para optimizar carga inicial
   thumbnail_url = cloudinary.upload(...)
   
   # ‚ùå MAL: Repite lo que dice el c√≥digo
   # Subir imagen a cloudinary
   thumbnail_url = cloudinary.upload(...)
   ```

7. **Valida inputs y outputs**
   - Backend: Serializers + custom validators
   - Frontend: zod schemas + type guards
   - Nunca conf√≠es en datos externos

8. **Usa type hints y tipos siempre**
   ```python
   # Python
   def create_artist_profile(user: User, data: dict) -> ArtistProfile:
   ```
   ```typescript
   // TypeScript
   function createOrder(items: ICartItem[]): Promise<IOrder>
   ```

9. **Verifica que el c√≥digo sea:**
   - ‚úÖ Mantenible (legible en 6 meses)
   - ‚úÖ Escalable (funciona con 1 y 10,000 usuarios)
   - ‚úÖ Testeable (f√°cil escribir tests)
   - ‚úÖ Resiliente (maneja errores gracefully)
   - ‚úÖ Limpio (sin code smells)

10. **Sigue las convenciones del proyecto**
    - Naming, estructura, patterns
    - Consulta secci√≥n "Calidad de C√≥digo" arriba

## Documentaci√≥n

### Estructura (3 niveles)

- `docs/` - General (arquitectura, auth, troubleshooting)
- `backend/docs/modules/{app}/` - Backend espec√≠fico
- `frontend/docs/` - Frontend espec√≠fico

### Cu√°ndo Documentar

**S√ç documenta:**
- Feature compleja (>1h) ‚Üí Usa `docs/.templates/feature-template.md`
- Bug resuelto (>1h) ‚Üí Usa `docs/.templates/troubleshooting-template.md`
- Cambio arquitect√≥nico o nueva integraci√≥n

**NO documenta:**
- CRUD simple, cambios UI menores, typos

### ‚ö†Ô∏è REGLA CR√çTICA: Mant√©n Docs Actualizadas

**SIEMPRE:**
1. Si cambias c√≥digo, actualiza docs relacionadas INMEDIATAMENTE
2. Busca refs: `grep -r "tu cambio" docs/`
3. Actualiza ejemplos de c√≥digo y fechas
4. Nunca marques como "desactualizado", actualiza directamente

**Por qu√©:** Docs desactualizadas son peor que no tener docs

## Contexto de Negocio (NO OLVIDAR)

- **Nomenclatura:** SIEMPRE usar "artisan" / "artesano" (NUNCA "artist" / "artista")
  * URLs: `/artesanos/{slug}` (espa√±ol)
  * Modelos: `ArtisanProfile` (NO `ArtistProfile`)
  * Tipos: `Artisan` (NO `Artist`)
  * Raz√≥n: Enfoque en artesan√≠a tradicional menorquina, no arte contempor√°neo
- Comisi√≥n: 10% fija en MVP (configurable en settings.py)
- Verificaci√≥n: Manual por admin (is_approved: False ‚Üí True)
- Compradores: Guest checkout (sin registro), solo email y datos de env√≠o
- MVP Scope: Auth + Artesanos + Portfolio + Shop + Pagos (‚úÖ implementado)
- Pendiente: Sistema de reviews, mapa interactivo, eventos/talleres
- Target: 10-15 artesanos piloto en Menorca

---

## üèóÔ∏è ARQUITECTURA DEL MONOREPO - REGLAS ESENCIALES

### Caracter√≠sticas Clave

- **Monorepo manual** (sin Turborepo/Nx) - Backend Django + Frontend Next.js separados
- **Comunicaci√≥n:** REST API (`/api/v1/`) con JWT
- **Deploy separado:** Railway (backend) + Vercel (frontend)
- **Auth:** JWT con refresh token autom√°tico (cookies, NO localStorage)
- **Im√°genes:** Cloudinary signed uploads (cliente sube directo, Django genera signature)

### üéØ Decisiones Arquitect√≥nicas (resumen)

1. **NO Turborepo/Nx** - Backend Python, Frontend Node, tecnolog√≠as diferentes, deploy separado
2. **REST > GraphQL** - DRF est√°ndar Django, simple debuggear, HTTP caching out-of-the-box
3. **Tipos manuales > Codegen** - Control total, sin dependencias, requiere verificaci√≥n semanal
4. **Deploy separado** - Railway (BE) + Vercel (FE), escalabilidad independiente
5. **Cloudinary signed uploads** - Cliente sube directo, Django solo genera signature 1h

**üìñ Ver detalles completos:** `docs/ai-assistants/CONTEXT_FOR_CLAUDE.md` ‚Üí Secci√≥n "Arquitectura del Monorepo"

### ‚ö†Ô∏è CHECKLIST SEMANAL: Consistencia Frontend ‚Üî Backend

**CR√çTICO:** Cuando cambies c√≥digo en backend o frontend, verifica:

#### 1. Modelos ‚Üí Serializers ‚Üí Tipos

```bash
# ¬øCambi√≥ el modelo User/Artisan/Product/Order?
# ‚Üí Verifica que el Serializer tenga los mismos campos
# ‚Üí Verifica que el tipo TypeScript coincida EXACTAMENTE
# ‚Üí Si a√±ades campo en backend, a√±√°delo en frontend INMEDIATAMENTE
```

**Ejemplo:**
```python
# backend/accounts/serializers.py
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        fields = ('id', 'email', 'username', 'role', 'can_sell')
```

```typescript
// frontend/src/types/user.ts
export interface User {
  id: number;
  email: string;
  username: string;
  role: UserRole;
  can_sell?: boolean;
}
```

**‚úÖ Campos deben coincidir 1:1**

#### 2. Endpoints ‚Üí API Services

```bash
# ¬øA√±adiste POST /api/v1/products/?
# ‚Üí A√±ade createProduct() en frontend/src/lib/api/products.ts
# ‚Üí Documenta en tabla de endpoints
```

#### 3. Permisos ‚Üí Frontend Guards

```bash
# ¬øCambi√≥ la l√≥gica de can_sell en backend?
# ‚Üí Verifica protecci√≥n de rutas en frontend/src/app/(dashboard)/**
# ‚Üí Actualiza authStore si es necesario
```

#### 4. Errores Comunes a Detectar

**‚ùå NUNCA:**
- Campo nuevo en serializer pero NO en tipo TypeScript
- Endpoint nuevo en backend pero NO en API service del frontend
- Tipo de dato diferente (backend: `int` vs frontend: `string`)
- Campo opcional en backend pero requerido en frontend (o viceversa)
- Enum values diferentes entre backend y frontend

**‚úÖ SIEMPRE:**
- Verificar tipos despu√©s de cambiar serializer
- A√±adir endpoint al API service cuando crees nueva vista
- Mantener misma estructura de datos en FE y BE
- Usar snake_case en backend, camelCase en frontend (consistente en cada lado)

### üì¶ Archivos que Cambian Juntos (recordatorio r√°pido)

| Backend | Frontend | Acci√≥n |
|---------|----------|--------|
| `*/models.py` ‚Üí `*/serializers.py` | `types/*.ts` | Actualizar tipos TypeScript |
| `*/views.py` ‚Üí `*/urls.py` | `lib/api/*.ts` | A√±adir API service |
| `settings.py` | `.env.local` | Sincronizar env vars |

### üöÄ Comandos Desarrollo

```bash
# Terminal 1: Backend
cd backend && python manage.py runserver  # :8000

# Terminal 2: Frontend
cd frontend && npm run dev  # :3000
```

---

## üìñ REFERENCIA: docs/ai-assistants/CONTEXT_FOR_CLAUDE.md

**Para informaci√≥n detallada que no necesitas en cada sesi√≥n, consulta:**

`docs/ai-assistants/CONTEXT_FOR_CLAUDE.md` contiene:
- üèóÔ∏è √Årbol completo del monorepo (ASCII, 2 niveles)
- üîÑ Diagrama de flujo JWT completo con refresh token
- üìä Tabla de endpoints (mapeo FE ‚Üî BE)
- ‚úÖ Verificaci√≥n de tipos (backend serializers vs frontend types)
- üöÄ Estrategia de deploy (Railway + Vercel, env vars)
- üéØ 10 decisiones arquitect√≥nicas (detalladas con trade-offs)
- üóÑÔ∏è Modelo de datos completo (relaciones, convenciones)
- üìù 3 flujos cr√≠ticos (registro, compra, upload Cloudinary)

**Cu√°ndo leer docs/ai-assistants/CONTEXT_FOR_CLAUDE.md:**
- Necesitas entender arquitectura profunda
- Vas a tomar decisiones arquitect√≥nicas
- Necesitas ver todos los endpoints
- Quieres verificar tipos espec√≠ficos
- Necesitas contexto para Claude Web

---

## Referencias

- Marina (proyecto anterior): /marina-backend, /marina-frontend
  ‚Üí Reutilizar l√≥gica de upload Cloudinary, drag & drop, auth flow
- Django Docs: https://docs.djangoproject.com/
- DRF Docs: https://www.django-rest-framework.org/
- Next.js Docs: https://nextjs.org/docs
- shadcn/ui: https://ui.shadcn.com/

## Notas Importantes

- Este es un MONOREPO: backend y frontend en el mismo repo
- Deploy separado: Railway (backend) + Vercel (frontend)
- Cursor puede ver TODO el contexto del proyecto
- Al responder, pregunta si algo no est√° claro antes de asumir